// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model users {
  id    Int     @id @default(autoincrement()) 
  email String  @unique
  password  String
  created_at DateTime @default(now())
  updated_at DateTime?
  encargados encargados[]
  roleId Int
  role     role   @relation(fields: [roleId], references: [id])
}

model role {
  id    Int     @id @default(autoincrement()) 
  name        String    @unique
  permissions rolePermission[]
  users       users[] 
}

model permission {
  id    Int     @id @default(autoincrement()) 
  name  String @unique
  roles rolePermission[]
}

model rolePermission {
  id    Int     @id @default(autoincrement()) 
  roleId       Int
  permissionId Int

  role        role       @relation(fields: [roleId], references: [id])
  permission  permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId]) // Asegura que no haya duplicados en la tabla intermedia
}



model alojamientos {
  id    Int     @id @default(autoincrement())
  nombre String  
  noHabitaciones Int
  direccion String
  departamento String
  clientes clientes[]
  compras compras[]
  encargados encargados[]
  habitaciones habitaciones[]
  inventarios inventarios[]
  reservaciones reservaciones[]
  created_at DateTime
  updated_at DateTime?
}

model compras {
  id    Int     @id @default(autoincrement())
  fecha DateTime
  productoCompras productoCompras[]
  alojamientoId Int
  alojamientos alojamientos @relation(fields: [alojamientoId], references: [id])
  created_at DateTime
  updated_at DateTime?
}

model encargados {
  id    Int     @id @default(autoincrement())
  nombre String
  paterno String
  materno String
  ci Int
  ext String
  celular Int
  reservaciones reservaciones[]
  alojamientoId Int
  alojamiento alojamientos @relation(fields: [alojamientoId], references: [id])
  userId Int
  user users @relation(fields: [userId], references: [id])
  created_at DateTime
  updated_at DateTime?
}

model habitaciones {
  id    Int     @id @default(autoincrement())
  noHabitacion Int
  preferencias String
  estado String
  reservaciones reservaciones[]
  alojamientoId Int
  alojamientos alojamientos @relation(fields: [alojamientoId], references: [id])
  created_at DateTime
  updated_at DateTime?
}

model inventarios {
  id    Int     @id @default(autoincrement())
  descripcion String
  fecha DateTime
  alojamientoId Int
  alojamientos alojamientos @relation(fields: [alojamientoId], references: [id])
  productoInventarios productoInventarios[]
  created_at DateTime
  updated_at DateTime?
}

model productos {
  id    Int     @id @default(autoincrement())
  nombre String
  precio String
  estado String
  departamento String
  productoCompras productoCompras[]
  productoInventarios productoInventarios[]
  productoVentas productoVentas[]
  created_at DateTime
  updated_at DateTime?
}

model productoCompras {
  id    Int     @id @default(autoincrement())
  precioCompra String
  productoId Int
  productos productos @relation(fields: [productoId],references: [id])
  compraId Int
  compras compras @relation(fields: [compraId], references: [id])
  created_at DateTime
  updated_at DateTime?
}

model productoInventarios {
  id    Int     @id @default(autoincrement())
  cantidad Int
  entrada Int
  salida Int 
  stock Int
  fecha DateTime
  productoId Int
  entradas entradas[]
  salidas salidas[]
  productos productos @relation(fields: [productoId],references: [id])
  inventarioId Int
  inventarios inventarios @relation(fields: [inventarioId], references: [id])
  created_at DateTime
  updated_at DateTime?
}

model reservaciones {
  id    Int     @id @default(autoincrement())
  fecha DateTime
  horaEntrada String
  horaSalida String?
  horaProgramada String
  tiempo String
  montoEntregado String
  compania String
  costoHabitacion String
  costoExtra String?
  total String
  totalVenta String?
  cambio String?
  estadoCambio String?
  ventas ventas[]
  habitacionId Int
  habitaciones habitaciones @relation(fields: [habitacionId], references: [id])
  encargadoId Int
  encargados encargados @relation(fields: [encargadoId], references: [id])
  alojamientoId Int
  alojamientos alojamientos @relation(fields: [alojamientoId], references: [id])
  clienteId Int
  clientes clientes @relation(fields: [clienteId], references: [id])
  created_at DateTime
  updated_at DateTime?
}

model ventas {
  id    Int     @id @default(autoincrement())
  fecha DateTime
  reservacionId Int
  productoVentas productoVentas[]
  reservaciones reservaciones @relation(fields: [reservacionId], references: [id])
  created_at DateTime
  updated_at DateTime?
}

model productoVentas {
  id    Int     @id @default(autoincrement())
  precioUni String
  cantidad Int
  precioTotal String
  productoId Int
  productos productos @relation(fields: [productoId], references: [id])
  ventaId Int
  ventas ventas @relation(fields: [ventaId], references: [id])
  created_at DateTime
  updated_at DateTime?
}

model entradas {
  id    Int     @id @default(autoincrement())
  descripcion String
  cantidad Int
  fecha DateTime
  productoInventarioId Int
  productoInventarios productoInventarios @relation(fields: [productoInventarioId], references: [id])
  created_at DateTime
  updated_at DateTime?
}

model salidas {
  id    Int     @id @default(autoincrement())
  descripcion String
  cantidad Int
  fecha DateTime
  productoInventarioId Int
  productoInventarios productoInventarios @relation(fields: [productoInventarioId], references: [id])
  created_at DateTime
  updated_at DateTime?
}

model clientes {
  id    Int     @id @default(autoincrement())
  nombre String
  paterno String
  materno String
  ci Int
  extencion String
  reservaciones reservaciones[]
  alojamientoId Int
  alojamientos alojamientos @relation(fields: [alojamientoId], references: [id])
  created_at DateTime
  updated_at DateTime?
}


